In the index.js, we pass store as props and in the App.js, we create a ComponentDidMount method which takes the store passed down from Index.html as props. We then 
subscribe to our store and use forceUpdate method to keep it updated. We pass a dispatch action in componentDidMount to addMovies(which we get from the data file). 

In the render method, we decouple list, favourites and showFavourites from props.store.getState(). We create a const displayMovies that will be used to display 
 either only the favourites or the complete list depending whether showFavourites is true or false.

 In the return method which renders the html, we have a Navbar component at the top. And then we have 2 tabs Movies and favourites. Both have an onChange method defined onClick.
 Using which we navigate between the movies and favourite tabs. 
 
 There is a MovieCard component which takes movie, key(index), dispatch and isFavourite as props. 
 We map the movies on the MovieCard component using the displayMovies which will hold either the complete list or the favourites depending upon the tag which has been
 clicked by the user. 


 In the MovieCard component, import addFavourite and removeFromFavourite actiontypes.
 Define handleFavourite and Unfavourite options for movies. Take the movie out of the prop and dispatch the addFavourite action. Same with unfavourite.
 Add the functionality for favourite and unfavourite button showing depending upon what is clicked when. 

Define variables(Action Types) for ADD_MOVIES, ADD_TO_FAVOURITES, REMOVE_FROM_FAVOURITES and SET_SHOW_FAVOURITES. 
Create Action Creators for all these action types. 

In the Reducer component, import ADD_MOVIES, ADD_TO_FAVOURITES, REMOVE_FROM_FAVOURITES and SET_SHOW_FAVOURITES from ../actions.

Create an initialMovieState with list as empty array, favourites as empty array, and showFavourites set to false. 

Define a reducer function, movies which takes in a state and gives out an action to be carried out on the store.

Define multiple switch cases in the reducer function.
Use the spread operator to copy everything from an array and specofy the thing that has to be changed. 

As a default case, return state(as you got it).


Create another reducer and combine all into 1. 
Afterwards we fix our decoupling in the App.js file. Since now the state is of the form {movies:{}, search: {}}

We need not create the rootReducer method as REact/REedux creates it for us.


Context****************************
We create StoreContext in Index.js and wrap the App component with Provider tags.
Pass the store as value to Provider.
We create Provider component and move the store there via props.
We enclose App component in the Provider component tags.
Import StoreContext in the App component
We have context property inside the StoreContext
In the App component return inside StoreContext.Consumer tags because the stuff inside uses store
Return the entire UI of the App component inside the callback function inside the Consumer component
Store will be passed as an argument to this callback (it is the value that we pass to the Provider)

Create an App Wrapper and use the consumer there and pass the store which we get from the callback function
as props to this App component 
We can now access store in any component using the Consumer component


We use connect function to connect s component to the redux store
Create connect function in App.js and declare what data we want from the store and which component we want to connect to the store.
We pass a afunction as a cllback method inside connect

connect function will call the callback with Redux store state
In connect function line, we declare that we want these properties from the store as props inside our App component. 

Connect will return an alltogethor new component and this will be 

If there are any changes only the connected function will be refreshed
Connect function will give a brand new component

